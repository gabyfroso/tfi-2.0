Los programas van a tener la siguiente estructura estimada

function x(void *args)
{
    char XcharSavedText[200];
    char UserElect[10] == "";

    struct Structs_Fnormal *x_args = (struct Structs_Fnormal *)args;
    void (*Reset_text)() = x_args->Reset_text;
    
    void (*Text_Logo)(char *) = x_args->Text_Logo;
    void (*Text_Say)(char *) = x_args->Text_Say;
    void (*Text_Say_add)(char *) = x_args->Text_Say_add;

    void (*ExitProgram) = x_args->ExitProgram;

    do
    {
        Reset_Text(); //Reinicia los textos para no ocupar toda la pantalla con el de funcion anterior.
        Text_Logo(GTXT_x_Logo); //Muestra en el logo, si es que hay
        Text_say(GTXT_x); //Muestra en pantalla

        Scan(UserElect);

        strcat(XcharSavedText, UserElect);

        //Este lo añade de manera pasiva, y lo muestra de manera presente, del cual cualquier actualización lo añadirá a la lista salvada
        Text_Say_add(XcharSavedText);


        switch(UserElect)
        {
            case 1:
                {
                    ExampleFunction(args); //los mismos argumentos, sin necesidad de convertirlos para usarlos como antes
                }
                break;
            case...
            ...

            ...
            case -5:
                Exit_Program(); //Forzar cierre
                break;
            Default:
                break;

        }
    

    //Para que si el usuario salió por error, revise lo que tenía los ejercicios y no se le reinicie.
    
    
    } while(atoi(UserElect) != 5)
     Text_Say_add("");
}

recordar usar el Text_Saved_add para almacenar información extra, 
ejemplo, datos ingresados por el usuario.

y limpiarlo una vez salga de las funciones
